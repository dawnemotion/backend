// https://programmers.co.kr/learn/courses/30/lessons/12940

function solution(n, m) {
  //최소공배수: 두 수의 배수 중에서 (공통되는) 제일 작은 수
  //최대공약수: 두 수의 약수 중에서 (공통되는) 제일 큰 수

  //최대공약수 구하기
  //1. max를 0으로
  let max = 0;
  //n,m 중 제일 큰 수를 i만큼 반복
  //나누어지는 약수i를 max에 재할당
  for (let i = 1; i <= Math.max(n, m); i++) {
    if (n % i === 0 && m % i === 0) {
      max = i;
    }
  }
  //최소공배수 구하기
  let min = 0;
  //제일 큰 값을 초기값으로 둔다.
  //조건식은 i가 n*m의 수보다 작거나 같을때까지
  //증감식도 제일 큰값을 둔다
  // 코드가 기니 줄인다.
  let biggest = Math.max(n, m);
  for (let i = biggest; i <= n * m; i += biggest) {
    if (i % Math.min(n, m) === 0) {
      min = i;
      //최초의 값만 가지고 오고 for문을 멈춘다.
      break;
    }
  }

  return [max, min];
}

// ==========================================================
// ==========================================================
// ==========================================================

function solution(n, m) {
  //유클리드 호제법
  //- 최대공약수를 구하기 위한 알고리즘 (= 공식)

  // a를 b로 나눴을 때 (a가 b보다 클 경우) ===  큰 수 에서 작은 수를 나눴을 때
  // 나머지 값이 0이 되면, 작은 수(b)가 최대공약수가 된다.
  // 나머지 값이 0이 아니라면, 작은 수(b)가 큰 수(a)가 된다.
  // 나머지 값은 작은 수(b)가 된다.
  // 나머지 값이 0이 나올때까지 위의 과정을 반복
  // 나머지 값이 0이 나오면, 작은 수 (b)가 최대공약수가 된다.

  let a = Math.max(n, m); //큰 수
  let b = Math.min(n, m); //작은 수
  let r = 0; // a를 b로 나눴을 때의 나머지 값을 저장

  while (a % b > 0) {
    r = a % b;
    a = b; // 큰 수에 작은 수를 할당
    b = r; // 작은 수에 나머지 값을 할당
  }
  // 최소 공배수는 두 수를 곱한 값에 최대공약수를 나눈 값
  return [b, (n * m) / b];
}
